"""
Django settings for smartsql project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv # Import load_dotenv
# import pymysql
# pymysql.install_as_MySQLdb()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 优先尝试加载 GCP secret 中挂载的 .env 文件
if os.path.exists("/secrets/ENV_FILE"):
    load_dotenv("/secrets/ENV_FILE")
    IS_CLOUD_RUN = True
else:
    # 本地开发时仍加载项目根目录 .env
    load_dotenv(BASE_DIR / '.env')
    IS_CLOUD_RUN = False

# === DEBUG 设置 ===
DEBUG = os.getenv("DEBUG", "False") == "True" and not IS_CLOUD

# === ALLOWED_HOSTS ===
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")


if IS_CLOUD_RUN:
    DEBUG = False
    if "*" not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append("*.a.run.app")
        
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'fallback-secret-key-if-not-set') # Provide a fallback

# SECURITY WARNING: don't run with debug turned on in production!
# Read DEBUG as string and convert to boolean
DEBUG = os.getenv('DJANGO_DEBUG', 'False') == 'True'

# Read ALLOWED_HOSTS as comma-separated string and split into list
# Fallback to empty list if not set
allowed_hosts_str = os.getenv('DJANGO_ALLOWED_HOSTS', '')
ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_str.split(',') if host.strip()] if allowed_hosts_str else []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
    'instructor',
    'rest_framework',
    'corsheaders',
    'student',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'smartsql.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'smartsql.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('DB_NAME', 'default_db_name'), # Provide fallback
        'USER': os.getenv('DB_USER', 'default_db_user'), # Provide fallback
        'PASSWORD': os.getenv('DB_PASSWORD', ''),       # Fallback to empty string
        'HOST': os.getenv('DB_HOST', 'localhost'),   # Fallback to localhost
        'PORT': os.getenv('DB_PORT', '3306'),        # Fallback to default MySQL port
        # 'OPTIONS': {
        #     'auth_plugin': 'caching_sha2_password',
        # },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://localhost:5173",
]

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'core.authentication.CustomJWTAuthentication',
    ],
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=36500),  # 100年
    'REFRESH_TOKEN_LIFETIME': timedelta(days=36500),
    # ... 其他配置
}

# --- Get OpenAI API Key ---
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
# --- End Get OpenAI API Key ---

# AI Settings
DB_SCHEMA_DESCRIPTION = os.getenv('DB_SCHEMA_DESCRIPTION', '数据库 Schema 描述未配置。') # Load the description